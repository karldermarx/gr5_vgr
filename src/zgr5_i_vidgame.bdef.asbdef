managed implementation in class zbp_gr5_i_vidgame unique;
strict ( 1 );

define behavior for ZGR5_I_VIDGAME //alias <alias_name>
persistent table zgr5_vgr_vidgame
lock master
authorization master ( instance )
//etag master <field_name>
{
  /*CUD-Methods*/
  create;
  update;
  delete;
  association _RentalOperation { create; }

  /*Field Controls*/
  field ( readonly, numbering : managed ) VideogameUuid;
  field ( readonly ) VidgameId, AverageRating;
  field ( mandatory ) RentalStatus, SystemTitle, VideogameGenre, VideogameReleaseYear, VideogameTitle;


  /*Actions, Validations and Determinations*/
  determination determineVidgameId on save { create; }

  validation validateGameTitle on save { create; update; field VideoGameTitle; }
  validation validateGameGenre on save { create; update; field VideoGameGenre; }
  validation validateReleaseYear on save { create; update; field VideoGameReleaseYear; }
  validation validateSystemTitle on save { create; update; field SystemTitle; }

  // Videogame can only be available or not in stock
  validation validateRentalStatus on save { create; update; field RentalStatus; }


  /*Mapping*/
  mapping for zgr5_vgr_vidgame corresponding
    {
      RentalStatus                    = rental_status;
      SystemTitle                     = system_title;
      VideogameGenre                  = videogame_genre;
      VidgameId                       = vidgame_id;
      VideogameReleaseYear            = videogame_release_year;
      VideogameTitle                  = videogame_title;
      VideogameUuid                   = videogame_uuid;
    }
 }

define behavior for ZGR5_I_RENTOP //alias <alias_name>
persistent table zgr5_vgr_rentop
lock dependent by _Videogame
authorization dependent by _Videogame
//etag master <field_name>
{

  /*CUD-Methods*/
  update;
  delete;

  /*Field Controls*/
  field ( readonly, numbering : managed ) RentalOperationUuid;
  field ( readonly )  RentalStartDate, RentalId, VideogameUuid, VideogameTitle, CustomerName, RentalFee, CukyField, RentalOperationStatus;
  field ( mandatory )  CustomerUuid, RentalReturnDate;
  association _Videogame;

  /*Actions, Validations and Determinations*/

  // enddate < startdate
  validation validateEndDate on save { create; update; field RentalReturnDate; }

  // validation validateRentalFee on save { create; update; field RentalFee; }

  // Rating Between 0 AND 10
  validation validateRating on save { create; update; field RentalRating;}

  // Videogame = Available
  validation validateStatus on save { create; }

  validation validateUUID on save { create; update; field CustomerUuid; }

  // EndDate != Null
  validation validateEndDateNull on save { create; update; field RentalReturnDate; }


  // Date = Systemdate
  determination determineRentalStartDate on save {create;}

  // new RentOp -> ID = ID + 1
  determination determineRentalId on save { create; }

  // new RentOp -> Calculate RentalFee
  determination determineRentalFee on save { create; }

  // new RentOp -> RentalOperationStatus = BORROWED
  determination determineRentalOperationStatus on save { create; }

  // new RentOp -> Videogame to Booked (B)
  determination determineVidStatus on save { create; }


  action cancel_rental_operation;


  /*Mapping*/
  mapping for zgr5_vgr_rentop corresponding
    {
      CukyField             = cuky_field;
      CustomerUuid          = customer_uuid;
      RentalFee             = rental_fee;
      RentalId              = rental_id;
      RentalOperationUuid   = rental_operation_uuid;
      RentalReturnDate      = rental_return_date;
      RentalStartDate       = rental_start_date;
      RentalOperationStatus = rental_operation_status;
      RentalRating          = rental_rating;
      VideogameUuid         = videogame_uuid;

    }
 }